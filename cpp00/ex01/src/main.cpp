//#include, they are preprocessor directives that tell the compiler to include
//the contents of the specified files before actual compilation begins
#include "phonebook.h"//include the custom class "phonebook"
#include <iostream>//input/output operations
#include <string>
#include <sstream>//For std::istringstream

void ensureInput(std::string& input, const std::string& detail)
{
    while (true)
    {
        std::cout << detail << ": ";
        std::getline(std::cin, input);
        if (!input.empty())
        {
            break;
        }
        std::cout << "Invalid input. " << detail << " cannot be empty." << std::endl;
    }
}

int main()
{
    PhoneBook phoneBook;
    std::string command;

    while (true)
    {
        std::cout << "Enter command (ADD, SEARCH, or EXIT): ";
        std::getline(std::cin, command);

        if (command == "EXIT")
        {
            break;
        }
        else if (command == "ADD")
        {
            Contact contact;
            std::string input;

            ensureInput(input, "First name");
            contact.setFirstName(input);

            ensureInput(input, "Last name");
            contact.setLastName(input);

            ensureInput(input, "Nickname");
            contact.setNickname(input);

            ensureInput(input, "Phone number");
            contact.setPhoneNumber(input);

            ensureInput(input, "Darkest secret");
            contact.setDarkestSecret(input);

            phoneBook.addContact(contact);
            std::cout << "Contact added successfully." << std::endl;
        }
        else if (command == "SEARCH")
        {
            phoneBook.displayContacts();

            std::cout << "Enter index to view details (or type back to return): ";
            std::getline(std::cin, command);
            if (command == "back")
            {
                continue;
            }

            int index = 0;
            std::istringstream iss(command);
            if (!(iss >> index))//attempts to read an integer from istringstream --> per capirci meglio : se iss >> index è falso, allora la condizione ! diventa vera ed entra nell'if
            {
                std::cout << "Invalid input. Please enter a valid number." << std::endl;
                continue;
            }

            phoneBook.displayContactDetail(index);
        }
        else
        {
            std::cout << "Invalid command. Please use ADD, SEARCH, or EXIT." << std::endl;
        }
    }

    return 0;
}

/*
int main()
{
    PhoneBook phoneBook;//crea un'istanza della classe phonebook... declaring a variable named phonebook
    std::string command;//dichiarazione di una variabile per contenere i comandi in input //std::string, is an object of the class iostream is a dynamic, resizable array of characters

    while (true)
    {
        std::cout << "Enter command (ADD, SEARCH, or EXIT): ";//std::cout is an object of class std::iostream that represents the standard output stream, used to output data to the console. 
        std::getline(std::cin, command);//legge una linea dallo standard input e la salva sulla variabile 'command'
		//command will contain exactly what was typed by the user without the trailing newline character.
		//std::getline function reads characters from std::cin until a newline character ('\n') is encountered. The newline character indicates the end of a line of input (typically generated by pressing Enter on the keyboard).
        if (command == "EXIT")
		{
            break;
        }
		else if (command == "ADD")
		{
            Contact contact; //crea un'istanza della classe Contact un nuovo oggetto contact è creato
            std::string input; // input field for a new contact

			//prompt the user
			//read the input
			//sets the respective property of the Contact object using setter methods 

            std::cout << "First name: ";
            std::getline(std::cin, input);
            contact.setFirstName(input);//contact: This is an object of the Contact class. Objects are instances of classes and contain the data (in member variables) and functions (methods) defined by the class.

            std::cout << "Last name: ";
            std::getline(std::cin, input);
            contact.setLastName(input);

            std::cout << "Nickname: ";
            std::getline(std::cin, input);
            contact.setNickname(input);

            std::cout << "Phone number: ";
            std::getline(std::cin, input);
            contact.setPhoneNumber(input);

            std::cout << "Darkest secret: ";
            std::getline(std::cin, input);
            contact.setDarkestSecret(input);
			//after all the fiels are filled
            phoneBook.addContact(contact);//the contact is added to phonebook // % modulo operation manages the circular buffer mechanism i

            std::cout << "Contact added successfully." << '\n'; //confermation for the user
        }
		else if (command == "SEARCH")
		{
            phoneBook.displayContacts();// display list of contact

            std::cout << "Enter index to view details (or type back to return): ";
            std::getline(std::cin, command); //ask user to put a input
            if (command == "back")
            {
                continue;//If the user types "back", it will skip the remaining steps and continue the loop.
            }

            int index = 0;
            std::istringstream iss(command);// declared //loads the string into iss, making it ready to be treated as a stream from which data can be extracted
            if (!(iss >> index))//The >> operator is used to extract data from iss and store it in the variable index
            {
                std::cout << "Invalid input. Please enter a valid number." << std::endl;
                continue;
            }
//iss is a variable name for an object of type std::istringstream. This object is specifically used to perform input operations from strings,
//which means it treats a string as a stream and allows you to extract values from it as if you were reading from std::cin or any other input stream.
            phoneBook.displayContactDetail(index);
			//Calls displayContactDetail on the PhoneBook instance to show details of the contact at the given index.
        }
        else
        {
            std::cout << "Invalid command. Please use ADD, SEARCH, or EXIT." << std::endl; //handling invalid commands 
        }
    }

    return 0;
}

*/

//Class: A template or blueprint that defines what attributes and methods its objects will have.
//Object: An instance of a class. Each object of a class has its own identity, and while it shares the structure of the class, it can hold its own state (values of its properties).
//The PhoneBook class likely has a constructor, which is a special type of method that is called automatically when a new object is created. This constructor sets up the initial state of the object, such as initializing its attributes. If no constructor is explicitly defined in the class, the compiler provides a default constructor that initializes the object with default values.


//Using the std namespace allows you to explicitly state that you are using
//a component from the C++ Standard Library, which is useful for clarity and avoiding
//conflicts. For example, you might have your own function or class named string,
//and using std::string clearly distinguishes the standard library version.

//
//The std::string class in C++ provides dynamic size management for strings,
//which means it can automatically adjust its size to accommodate the amount of data it holds. 
//This is a significant advantage over C-style strings, which are essentially fixed-size arrays of characters.
//All the memory allocation and deallocation are handled internally by the std::string class. As a user of the class,
//you do not need to worry about memory management, which reduces the risks of memory leaks and buffer overflows that
//are common with manual memory management in C-style strings.


/*
Purpose of <<
Data Direction: The << operator directs the data to the intended destination. In the case of std::cout, it directs the data to the standard output (typically the console).
Chainable Operations: The << operator also allows for chaining multiple operations in a single statement. This makes code compact and easy to understand, as it linearly shows the flow of data manipulation and output.

std::cout: This is the standard output stream used to print data to the console.
<< operators: These are used to insert data into the output stream. They are what push the data (including formatting commands and the actual text) into the stream directed towards the console or other output mediums.
std::setw(10): This manipulator sets the minimum field width for the next data to be inserted into the stream. It ensures that the "Nickname" string will occupy at least 10 characters' width on the output.
"Nickname": This is the actual string data that is being output.
std::endl: This inserts a newline character into the stream and flushes the stream, ensuring all output is immediately written to the console.

A stream is an abstraction that represents a device on which input and ouput operations are performed. A stream can basically be thought of as a source or destination of characters of indefinite length.
Output Operations: When you use std::cout, you typically use the insertion operator (<<) to send data into the stream. This operator is overloaded to handle different types of data seamlessly, such as integers, floating-point numbers, strings, and so forth.
Buffering: std::cout is generally buffered, which means that output sent to std::cout may not immediately appear on the terminal. The buffer is flushed (i.e., the data is sent to the terminal) when it's full, when std::endl is inserted into the stream, or when the program terminates. 


*/